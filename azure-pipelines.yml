trigger:
  branches:
    include:
      - main 

# pool:
#   name: Default
#   demands:
#     - Agent.Name -equals DevOpsAgentVM
#     - Docker   
pool:
  vmImage: 'ubuntu-latest'

variables:
- group: Pipeline-Secrets  
- name: K8S_NAMESPACE
  value: "default"
- name: K8S_DEPLOYMENT_NAME
  value: "vuln-scanner"
- name: IMAGE_NAME
  value: "vuln-scanner"
- name: K8S_CLUSTER
  value: "dev-aks-cluster"
- name: RESOURCE_GROUP
  value: "DevOps_Project"

stages:
  - stage: Build
    displayName: "Build & Validate"
    jobs:
      - job: BuildAndValidate
        steps:
          - checkout: none
          - script: |
              git clone https://github.com/chanduusc/Devops-task.git $(Build.SourcesDirectory)/app-repo
              ls -la $(Build.SourcesDirectory)/app-repo
            displayName: "Clone Application Repository"

          - task: Docker@2
            displayName: "Build and Push Docker Image"
            inputs:
              containerRegistry: "ACR_Service_Connection"
              repository: "$(IMAGE_NAME)"
              command: "buildAndPush"
              Dockerfile: "$(Build.SourcesDirectory)/app-repo/Dockerfile"
              buildContext: "$(Build.SourcesDirectory)/app-repo"
              tags: |
                $(Build.BuildId)
                latest

  - stage: SecurityScan
    displayName: "Security Scanning with Trivy"
    dependsOn: Build
    jobs:
      - job: Scan
        steps:
          - script: |
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh
              trivy image $(ACR_USERNAME).azurecr.io/$(IMAGE_NAME):$(Build.BuildId)
            displayName: "Run Trivy Security Scan"

  - stage: Deploy
    displayName: "Deploy to Kubernetes"
    dependsOn: SecurityScan
    jobs:
      - job: Deploy
        steps:
          - task: Kubernetes@1
            displayName: "Deploy to AKS"
            inputs:
              connectionType: "Azure Resource Manager"
              azureSubscription: "Azure_Service_Connection"
              azureResourceGroup: "$(RESOURCE_GROUP)"
              kubernetesCluster: "$(K8S_CLUSTER)"
              command: "apply"
              useConfigurationFile: true
              configuration: "$(Build.SourcesDirectory)/k8s/deployment.yaml"
              arguments: >
                -n $(K8S_NAMESPACE)
                --set image.repository=$(ACR_USERNAME).azurecr.io/$(IMAGE_NAME)
                --set image.tag=$(Build.BuildId)
                --set DATABASE_URL="$(DATABASE_URL)"

          - script: |
              kubectl rollout status deployment/$(K8S_DEPLOYMENT_NAME) -n $(K8S_NAMESPACE) --timeout=300s
            displayName: "Verify Deployment"

  - stage: Rollback
    displayName: "Rollback on Failure"
    dependsOn: Deploy
    condition: failed()
    jobs:
      - job: Rollback
        steps:
          - script: |
              kubectl rollout undo deployment/$(K8S_DEPLOYMENT_NAME) -n $(K8S_NAMESPACE)
            displayName: "Rollback to Previous Deployment"